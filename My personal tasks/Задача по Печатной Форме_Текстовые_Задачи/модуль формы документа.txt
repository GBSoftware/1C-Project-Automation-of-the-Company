&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		ТекПользователь = Пользователи.ТекущийПользователь();
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ТекПользователь);
		ЗаполнениеДокументов.ЗаполнитьРеквизитыДокумента(Объект, ТекПользователь, , Объект.Организация); 
		
		Объект.КомментарийПриложениеОчистка = "Перечень актов по очистке (подработке) в приложении 1, прилагается";
		Объект.КомментарийПриложениеСушка   = "Перечень актов по сушке в приложении 2, прилагается";
		
		Объект.НомерПриложенияПоОчистке = "1";
		Объект.НомерПриложенияПоСушке   = "2";
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета =  ОбщегоНазначения.ПолучитьЗначениеПеременной("ВалютаРегламентированногоУчета");
	//НастроитьВидимостьЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура РасчетЗаХранение(Команда)
	
	ТекстСообщения = "";
	
	Если Не (ЗначениеЗаполнено(Объект.МестоХранения) Или ЗначениеЗаполнено(Объект.ПодразделениеОрганизации)) Тогда 
		ТекстСообщения = "Обязательно должно быть выбрано ""Место хранения"" или ""Подразделение""";
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Контрагент) и ОбщегоНазначения.ЗначениеНеЗаполнено(Объект.ВидПоступления) Тогда 
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Если в документе указан контрагент, обязательно должен быть выбран ""Вид поступления""";
	КонецЕсли;
	
 
	Если ТекстСообщения = "" Тогда 
		
		РассчитатьХранениеНаСервере();
		ЗаполнитьПодработкуНаСервере();
		РассчитатьОборотыНаСервере();		
		РассчитатьВсегоПоРасходу();
		           		
	Иначе 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	
КонецПроцедуры


&НаСервере
Процедура РассчитатьХранениеНаСервере()
	
	ТаблицаХранение = ПолучитьТаблицуДляРасчетаХранения();
	
	ОписаниеЧисла_15_0 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0);
	
	ТаблицаХранение.Колонки.Добавить("КонецПериода",   ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаХранение.Колонки.Добавить("Остаток",        ОписаниеЧисла_15_0);
	ТаблицаХранение.Колонки.Добавить("ДнейХранения",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	ТаблицаХранение.Колонки.Добавить("ОстатокДень", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	
	Остаток = ПолучитьОстаток(Объект.НачалоПериода);
	
	
	
	НомерПП        = 0;		
	ТекущийМесяц   = Месяц(Объект.НачалоПериода);
	ДнейВТекМесяце = День(КонецМесяца(Объект.НачалоПериода));
	ПоследнийДеньТекМесяца = НачалоДня(КонецМесяца(Объект.НачалоПериода)); 
	
	КоличествоДвижений = ТаблицаХранение.Количество();
	
	
	Пока НомерПП < КоличествоДвижений Цикл 
		
		СтрокаХранение = ТаблицаХранение[НомерПП]; 
		
		//сначала провеяем только первую строку
		Если НомерПП = 0 И Объект.НачалоПериода < СтрокаХранение.НачалоПериода и Остаток <> 0 Тогда 
			
			НоваяСтрокаХранение = ДобавитьДополнительноеДвижениеВХранение(ТаблицаХранение, НомерПП, НачалоДня(НачалоМесяца(СтрокаХранение.ПериодДень)), НачалоДня(СтрокаХранение.ПериодДень));
			
			НоваяСтрокаХранение.ПериодДень = НоваяСтрокаХранение.НачалоПериода;
			НоваяСтрокаХранение.Приход = 0;
			НоваяСтрокаХранение.Расход = 0;
			КоличествоДвижений = КоличествоДвижений + 1;
			Остаток = Остаток + НоваяСтрокаХранение.Приход - НоваяСтрокаХранение.Расход;
			РассчитатьСтрокуХранения(НоваяСтрокаХранение, Остаток, ДнейВТекМесяце);
			
		ИначеЕсли НомерПП + 1 = КоличествоДвижений Тогда //если это последняя строка в таблице 
			
			СтрокаХранение.НачалоПериода  = НачалоДня(СтрокаХранение.ПериодДень);
			СтрокаХранение.КонецПериода   = НачалоДня(КонецМесяца(СтрокаХранение.ПериодДень));
			
			Остаток = Остаток + СтрокаХранение.Приход - СтрокаХранение.Расход;
			
			Если СтрокаХранение.КонецПериода = ПоследнийДеньТекМесяца Тогда  					
				РассчитатьСтрокуХранения(СтрокаХранение, Остаток, ДнейВТекМесяце, Истина);
			Иначе 
				РассчитатьСтрокуХранения(СтрокаХранение, Остаток, ДнейВТекМесяце);
			КонецЕсли;
			
		Иначе 
			
			СледующееДвижение = ТаблицаХранение[НомерПП+1];
			
			СледующийМесяц = Месяц(СледующееДвижение.ПериодДень);
			
			Если ТекущийМесяц = СледующийМесяц Тогда 
				СтрокаХранение.НачалоПериода  = НачалоДня(СтрокаХранение.ПериодДень);
				СтрокаХранение.КонецПериода   = НачалоДня(СледующееДвижение.ПериодДень);
				Остаток = Остаток + СтрокаХранение.Приход - СтрокаХранение.Расход;
				РассчитатьСтрокуХранения(СтрокаХранение, Остаток, ДнейВТекМесяце);
				
			Иначе
				//перед тем как перейти к след.месяцу закрываем текущий
				
				СтрокаХранение.НачалоПериода  = НачалоДня(СтрокаХранение.ПериодДень);
				СтрокаХранение.КонецПериода   = НачалоДня(КонецМесяца(СтрокаХранение.ПериодДень));
				
				Остаток = Остаток + СтрокаХранение.Приход - СтрокаХранение.Расход;
				РассчитатьСтрокуХранения(СтрокаХранение, Остаток, ДнейВТекМесяце, Истина);
				
				//// добавляем новую строку с Начала нового месяца
				ТекущийМесяц = ?(ТекущийМесяц = 12, 1, ТекущийМесяц + 1); 
				ТекущийГод = ?(ТекущийМесяц = 1, год(СтрокаХранение.ПериодДень) + 1, год(СтрокаХранение.ПериодДень));
				ДатаНачалаНовогоМесяца = Дата(СтрЗаменить(ТекущийГод, Символы.НПП, "") + ?(ТекущийМесяц < 10, "0" + Строка(ТекущийМесяц), Строка(ТекущийМесяц)) + "01");
				ДнейВТекМесяце = День(КонецМесяца(ДатаНачалаНовогоМесяца));
				
				НоваяСтрокаХранение = ДобавитьДополнительноеДвижениеВХранение(ТаблицаХранение, НомерПП + 1, ДатаНачалаНовогоМесяца, ДатаНачалаНовогоМесяца);
				
				НоваяСтрокаХранение.ПериодДень = НоваяСтрокаХранение.НачалоПериода;
				НоваяСтрокаХранение.Приход = 0;
				НоваяСтрокаХранение.Расход = 0;
				КоличествоДвижений = КоличествоДвижений + 1;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		
		НомерПП = НомерПП + 1;
		
	КонецЦикла;
	
	ИтогоОстатокДень = ТаблицаХранение.Итог("ОстатокДень");
	ИтогоПриход      = ТаблицаХранение.Итог("Приход");
	
	
	СреднийСрокХранения = ?(ИтогоПриход = 0, 0, Окр(ИтогоОстатокДень / ИтогоПриход));
	Объект.СреднийСрокХранения = СреднийСрокХранения;
	
	СрокХраненияМесяцев    = СреднийСрокХранения / 30;
	СрокХраненияБольше3Мес = Истина;
	ТипыНормУбыли          = Перечисления.ТипыНормУбыли;
	РазницаМеждуНормами    = 0;
	СреднийСрокПредПоНорме = 0;
	СреднийСрокТекПоНорме  = 0;
	
	Если СрокХраненияМесяцев < 3 Тогда
		
		ТипНормы     = ТипыНормУбыли.До3Мес;
		ТипНормыПред = ТипыНормУбыли.ПустаяСсылка();
		СрокХраненияБольше3Мес = Ложь;
		
	ИначеЕсли СрокХраненияМесяцев > 3 и СрокХраненияМесяцев < 6 Тогда
		
		ТипНормы     = ТипыНормУбыли.От3До6Мес;	
		ТипНормыПред = ТипыНормУбыли.До3Мес; 
		СреднийСрокПредПоНорме = 0;
		СреднийСрокТекПоНорме  = 3;
		
	ИначеЕсли СрокХраненияМесяцев > 6 и СрокХраненияМесяцев < 12 Тогда 
		
		ТипНормы     = ТипыНормУбыли.От6МесДоГода;
		ТипНормыПред = ТипыНормУбыли.От3До6Мес();
		СреднийСрокПредПоНорме = 3;
		СреднийСрокТекПоНорме  = 6;
		
	Иначе 
		
		ТипНормы     = ТипыНормУбыли.Больше1Года;
		ТипНормыПред = ТипыНормУбыли.От6МесДоГода;
		СреднийСрокПредПоНорме = 6;
		СреднийСрокТекПоНорме  = 12;
		
	КонецЕсли;
	
	парамПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда 
		парамПодразделение = Объект.ПодразделениеОрганизации;
	ИначеЕсли ЗначениеЗаполнено(Объект.МестоХранения) Тогда 
		парамПодразделение = Объект.МестоХранения.ПодразделениеОрганизации;
	КонецЕсли;
	
	НормаУбылиТек     = 0;
	НормаМехПотерьТек = 0;
	
	НормаУбылиПред     = 0;
	НормаМехПотерьПред = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыЕстественнойУбылиТек.Номенклатура,
	|	НормыЕстественнойУбылиТек.Подразделение,
	|	НормыЕстественнойУбылиТек.НормаУбыли,
	|	НормыЕстественнойУбылиТек.НормаМехПотерь,
	|	0 КАК НормаУбылиПред,
	|	0 КАК НормаМехПотерьПред
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.НормыЕстественнойУбыли КАК НормыЕстественнойУбылиТек
	|ГДЕ
	|	НормыЕстественнойУбылиТек.Номенклатура = &Номенклатура
	|	И НормыЕстественнойУбылиТек.Подразделение = &Подразделение
	|	И НормыЕстественнойУбылиТек.ТипНормы = &ТипНормы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормыЕстественнойУбыли.Номенклатура,
	|	НормыЕстественнойУбыли.Подразделение,
	|	0,
	|	0,
	|	НормыЕстественнойУбыли.НормаУбыли,
	|	НормыЕстественнойУбыли.НормаМехПотерь
	|ИЗ
	|	РегистрСведений.НормыЕстественнойУбыли КАК НормыЕстественнойУбыли
	|ГДЕ
	|	НормыЕстественнойУбыли.Номенклатура = &Номенклатура
	|	И НормыЕстественнойУбыли.Подразделение = &Подразделение
	|	И НормыЕстественнойУбыли.ТипНормы = &ТипНормыПред
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Номенклатура,
	|	вт.Подразделение,
	|	МАКСИМУМ(вт.НормаУбыли) КАК НормаУбыли,
	|	МАКСИМУМ(вт.НормаМехПотерь) КАК НормаМехПотерь,
	|	МАКСИМУМ(вт.НормаУбылиПред) КАК НормаУбылиПред,
	|	МАКСИМУМ(вт.НормаМехПотерьПред) КАК НормаМехПотерьПред
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Номенклатура,
	|	вт.Подразделение";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура); 		  
	Запрос.УстановитьПараметр("Подразделение", парамПодразделение);
	Запрос.УстановитьПараметр("ТипНормы", ТипНормы);
	Запрос.УстановитьПараметр("ТипНормыПред", ТипНормыПред);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НормаУбылиТек      = Выборка.НормаУбыли;
		НормаМехПотерьТек  = Выборка.НормаМехПотерь;
		НормаУбылиПред     = Выборка.НормаУбылиПред;
		НормаМехПотерьПред = Выборка.НормаМехПотерьПред;
		
	КонецЦикла;
	
	
	Если СрокХраненияБольше3Мес Тогда 
		
		РазницаМеждуНормами   = НормаУбылиТек - НормаУбылиПред;
		РазницаСроковХранения = СреднийСрокХранения - 
		Объект.НормаУбыли = Окр(НормаУбылиПред + ((РазницаМеждуНормами * СреднийСрокПредПоНорме)/СреднийСрокТекПоНорме),3);
		
	Иначе  
		//до 3 мес
		
		Объект.НормаУбыли = Окр(((НормаУбылиТек - НормаМехПотерьТек) * 0.011 * СреднийСрокХранения + НормаМехПотерьТек), 3);
		
	КонецЕсли;
	
	
	
	Объект.Хранение.Загрузить(ТаблицаХранение);
	
КонецПроцедуры

//-------------------------------------------------------------------------//
&НаКлиенте
Процедура ЗаполнитьМатериалыКонтрагента(Команда)
	  ТекстСообщения = "";
	  
	  Если Не (ЗначениеЗаполнено(Объект.МестоХранения) Или ЗначениеЗаполнено(Объект.ПодразделениеОрганизации)) Тогда
		  ТекстСообщения = "Обязательно должно быть выбрано ""Место хранения"" или ""Подразделение""";
	  КонецЕсли;
	  
	  ЗаполнитьТЗМатериальныеЦенностиКонтрагента();
КонецПроцедуры
  
&НаСервере
Процедура ЗаполнитьТЗМатериальныеЦенностиКонтрагента()
	Перем ОперацииЗерновыеСохраненная, СтатусыПередачиСохраненная, ОперацииЗерновые, СтатусыПередачи;
	
	ОперацииЗерновые = Перечисления.ВидыОперацийПриемнаяКвитанцияЗерновые;
	СтатусыПередачи =  Перечисления.СтатусыПолученияПередачиТоваров;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПолученныеОстатки.ВидНоменклатуры,
	               |	ПолученныеОстатки.Номенклатура,
	               |	ПолученныеОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	ПолученныеОстатки.Номенклатура.ЕдиницаМест КАК ЕдиницаИзмеренияМест,
	               |	СУММА(ПолученныеОстатки.КоличествоОстаток) КАК Количество,
	               |	ПолученныеОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	ПолученныеОстатки.Серия,
	               |	ПолученныеОстатки.ЦенаИзготовителя,
	               |	ПолученныеОстатки.СчетУчета,
	               |	ПолученныеОстатки.ДокументПоступления,
	               |	ПолученныеОстатки.ХарактеристикаНоменклатуры,
	               |	ПолученныеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ПолученныеОстатки.СтатусПолучения,
	               |	СУММА(ПолученныеОстатки.СуммаОстаток) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровПолученные.Остатки(
	               |			&Дата,
	               |			Номенклатура = &Номенклатура
	               |				И Организация = &Организация
	               |				И ВЫБОР
	               |					КОГДА &ПериодЗаготовки = ЗНАЧЕНИЕ(Справочник.ПериодыЗаготовки.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Серия.ПериодЗаготовки = &ПериодЗаготовки
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &МестоХранения = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ МестоХранения = &МестоХранения
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ МестоХранения.ПодразделениеОрганизации = &Подразделение
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриемнаяКвитанцияЗерновые.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ СтатусПолучения = &ВидПоступления
	               |				КОНЕЦ) КАК ПолученныеОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПолученныеОстатки.ВидНоменклатуры,
	               |	ПолученныеОстатки.Номенклатура,
	               |	ПолученныеОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	               |	ПолученныеОстатки.Номенклатура.ЕдиницаМест,
	               |	ПолученныеОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	               |	ПолученныеОстатки.Серия,
	               |	ПолученныеОстатки.ЦенаИзготовителя,
	               |	ПолученныеОстатки.СчетУчета,
	               |	ПолученныеОстатки.ДокументПоступления,
	               |	ПолученныеОстатки.ХарактеристикаНоменклатуры,
	               |	ПолученныеОстатки.ДоговорКонтрагента.Владелец,
	               |	ПолученныеОстатки.СтатусПолучения";
				
				Запрос.УстановитьПараметр("Дата",            Объект.КонецПериода);   
				Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
				Запрос.УстановитьПараметр("МестоХранения",   Объект.МестоХранения); 
				Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
				Запрос.УстановитьПараметр("Организация",     Объект.Организация);
				Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
				Запрос.УстановитьПараметр("Контрагент",      Объект.Контрагент);
				Запрос.УстановитьПараметр("ВидПоступления",  Объект.ВидПоступления);
				
				Если Объект.ВидПоступления = ОперацииЗерновые.ВПереработку Тогда
					ОперацииЗерновыеСохраненная = СтатусыПередачи.ВПереработку;
				КонецЕсли;
				
				Если Объект.ВидПоступления = ОперацииЗерновые.НаОтветственноеХранение Тогда
					СтатусыПередачиСохраненная = СтатусыПередачи.НаХранение;
				КонецЕсли;
				
				
		
	//запись данных в переменную
	Результат = Запрос.Выполнить().Выгрузить();				
	Объект.МатериальныеЦенностиКонтрагента.Загрузить(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ТекстСообщения = "";
	
	Если Не (ЗначениеЗаполнено(Объект.МестоХранения) Или ЗначениеЗаполнено(Объект.ПодразделениеОрганизации)) Тогда 
		ТекстСообщения = "Обязательно должно быть выбрано ""Место хранения"" или ""Подразделение""";
	КонецЕсли;
	
	ЗаполнитьТЗМатериальныеЦенности();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗМатериальныеЦенности()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.ВидНоменклатуры,
	|	Остатки.Номенклатура,
	|	Остатки.КоличествоОстаток КАК Количество,
	|	Остатки.Серия,
	|	Остатки.ЦенаИзготовителя,
	|	Остатки.ДокументПоступления,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.ВидНоменклатуры.СчетУчета КАК СчетУчета,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.ПартииТМЦРегламентные.Остатки(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ВЫБОР
	|					КОГДА &ПериодЗаготовки = ЗНАЧЕНИЕ(Справочник.ПериодыЗаготовки.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Серия.ПериодЗаготовки = &ПериодЗаготовки
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Организация = &Организация
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &МестоХранения = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения = &МестоХранения
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения.ПодразделениеОрганизации = &Подразделение
	|				КОНЕЦ) КАК Остатки";
	
	Запрос.УстановитьПараметр("Дата",            Объект.КонецПериода);   
	Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
	Запрос.УстановитьПараметр("МестоХранения",   Объект.МестоХранения); 
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
	
	//запись данных в переменную
	Результат = Запрос.Выполнить().Выгрузить();				
	Объект.МатериальныеЦенности.Загрузить(Результат);
КонецПроцедуры
//---------------------------------------------------------------------------//

&НаСервере
Процедура РассчитатьОборотыНаСервере()
	
	ОчиститьДанныеПоПеревеске();
	
	ПеревескаПриход_Дата = '00010101';
	ПеревескаРасход_Дата = '00010101';    	
	
	ЦПВлажность_ПриходВсего = 0;
	ЦПСорная_ПриходВсего    = 0;
	
	ЦПВлажность_РасходВсего = 0;
	ЦПСорная_РасходВсего    = 0;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КачествоЗернаОбороты.Номенклатура,
	|	СУММА(КачествоЗернаОбороты.КоличествоПриходПриход) КАК КоличествоПриход,
	|	СУММА(КачествоЗернаОбороты.КоличествоРасходПриход) КАК КоличествоРасход,
	|	ТИПЗНАЧЕНИЯ(КачествоЗернаОбороты.Регистратор) КАК ТипДокумента,
	|	КачествоЗернаОбороты.Регистратор,
	|	КачествоЗернаОбороты.ПериодДень КАК ПериодДень,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КачествоЗернаОбороты.Регистратор) = ТИП(документ.ПеремещениеСырья)
	|			ТОГДА ВЫБОР
	|					КОГДА КачествоЗернаОбороты.Регистратор.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеСырья_Перевеска)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Перевеска,
	|	КачествоЗернаОбороты.ЦПВлажностьПриходПриход КАК ЦПВлажностьПриход,
	|	КачествоЗернаОбороты.ЦПСорнаяПриходПриход КАК ЦПСорнаяПриход,
	|	КачествоЗернаОбороты.ЦПВлажностьРасходПриход КАК ЦПВлажностьРасход,
	|	КачествоЗернаОбороты.ЦПСорнаяРасходПриход КАК ЦПСорнаяРасход,
	|	УчетКачестваЗерна.Отход,
	|	УчетКачестваЗерна.Отход.КлассификацияОтходовПоСодержаниюЗерна КАК КлассификацияОтходов
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрНакопления.УчетКачестваЗерна.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			Номенклатура = &Номенклатура
	|				И ВЫБОР
	|					КОГДА &ПериодЗаготовки = ЗНАЧЕНИЕ(Справочник.ПериодыЗаготовки.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Серия.ПериодЗаготовки = &ПериодЗаготовки
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &МестоХранения = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения = &МестоХранения
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения.ПодразделениеОрганизации = &Подразделение
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Контрагент = &Контрагент
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриемнаяКвитанцияЗерновые.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВидПоступления = &ВидПоступления
	|				КОНЕЦ
	|				И Перевод = ЛОЖЬ
	|				И ВнутреннееПеремещение = ЛОЖЬ) КАК КачествоЗернаОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетКачестваЗерна КАК УчетКачестваЗерна
	|		ПО КачествоЗернаОбороты.Регистратор = УчетКачестваЗерна.Регистратор
	|			И КачествоЗернаОбороты.НомерСтроки = УчетКачестваЗерна.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	КачествоЗернаОбороты.Номенклатура,
	|	ТИПЗНАЧЕНИЯ(КачествоЗернаОбороты.Регистратор),
	|	КачествоЗернаОбороты.Регистратор,
	|	КачествоЗернаОбороты.ПериодДень,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КачествоЗернаОбороты.Регистратор) = ТИП(документ.ПеремещениеСырья)
	|			ТОГДА ВЫБОР
	|					КОГДА КачествоЗернаОбороты.Регистратор.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеСырья_Перевеска)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	КачествоЗернаОбороты.ЦПВлажностьПриходПриход,
	|	КачествоЗернаОбороты.ЦПСорнаяПриходПриход,
	|	КачествоЗернаОбороты.ЦПВлажностьРасходПриход,
	|	КачествоЗернаОбороты.ЦПСорнаяРасходПриход,
	|	УчетКачестваЗерна.Отход,
	|	УчетКачестваЗерна.Отход.КлассификацияОтходовПоСодержаниюЗерна
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Обороты.Номенклатура,
	|	ВТ_Обороты.КоличествоПриход,
	|	ВТ_Обороты.КоличествоРасход,
	|	ВТ_Обороты.ТипДокумента,
	|	ВТ_Обороты.Регистратор,
	|	ВТ_Обороты.ПериодДень КАК ПериодДень,
	|	ВТ_Обороты.Перевеска,
	|	ВТ_Обороты.ЦПВлажностьПриход,
	|	ВТ_Обороты.ЦПСорнаяПриход,
	|	ВТ_Обороты.ЦПВлажностьРасход,
	|	ВТ_Обороты.ЦПСорнаяРасход,
	|	ВТ_Обороты.Отход,
	|	ВТ_Обороты.КлассификацияОтходов,
	|	ВЫБОР
	|		КОГДА ВТ_Обороты.КоличествоПриход > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВидДвиженияПриход,
	|	ВЫБОР
	|		КОГДА ВТ_Обороты.КоличествоРасход > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВидДвиженияРасход,
	|	ВЫБОР
	|		КОГДА ВТ_Обороты.Отход = ЗНАЧЕНИЕ(справочник.Номенклатура.Пустаяссылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СписаниеОтходов
	|ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень";
	
	Запрос.УстановитьПараметр("НачалоПериода",   Объект.НачалоПериода);   
	Запрос.УстановитьПараметр("КонецПериода",    КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
	Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
	Запрос.УстановитьПараметр("МестоХранения",   Объект.МестоХранения); 
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Контрагент",      Объект.Контрагент);
	Запрос.УстановитьПараметр("ВидПоступления",  Объект.ВидПоступления);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда 
		
		///Заполним данные по перевескам по приходу и расходу
		ТабПриход_Перевеска = РезультатЗапроса.Скопировать(Новый Структура("Перевеска, ВидДвиженияПриход", Истина, Истина));
		ТабРасход_Перевеска = РезультатЗапроса.Скопировать(Новый Структура("Перевеска, ВидДвиженияРасход", Истина, Истина));
		
		КоличествоПеревесок = ТабПриход_Перевеска.Количество();
		
		Если КоличествоПеревесок<>0 Тогда 
			
			 ТабПриход_Перевеска.Сортировать("ПериодДень");
			 Масса    = ТабПриход_Перевеска.Итог("КоличествоПриход");
			 ЦП_Вл    = ТабПриход_Перевеска.Итог("ЦПВлажностьПриход");
			 ЦП_СП    = ТабПриход_Перевеска.Итог("ЦПСорнаяПриход");
			 
			 Объект.ПеревескаПриходДата          = ТабПриход_Перевеска[КоличествоПеревесок-1].ПериодДень;
			 Объект.ПеревескаПриходКоличество    = Масса;
			 Объект.ПеревескаПриходВлажность     = ?(Масса = 0, 0, Окр(ЦП_Вл * 100 / Масса, 2));
			 Объект.ПеревескаПриходСорнаяПримесь = ?(Масса = 0, 0, Окр(ЦП_СП * 100 / Масса, 2));
			 
			 ЦПВлажность_ПриходВсего = ЦПВлажность_ПриходВсего + ЦП_Вл;
			 ЦПСорная_ПриходВсего    = ЦПСорная_ПриходВсего + ЦП_СП;

			 
		КонецЕсли;
		
		
		КоличествоПеревесок = ТабРасход_Перевеска.Количество();
		
		Если КоличествоПеревесок<>0 Тогда 
			
			 ТабРасход_Перевеска.Сортировать("ПериодДень");
			 Масса    = ТабРасход_Перевеска.Итог("КоличествоРасход");
			 ЦП_Вл    = ТабРасход_Перевеска.Итог("ЦПВлажностьРасход");
			 ЦП_СП    = ТабРасход_Перевеска.Итог("ЦПСорнаяРасход");
			 
			 Объект.ПеревескаРасходДата          = ТабРасход_Перевеска[КоличествоПеревесок-1].ПериодДень;
			 Объект.ПеревескаРасходКоличество    = Масса;
			 Объект.ПеревескаРасходВлажность     = ?(Масса = 0, 0, Окр(ЦП_Вл * 100 / Масса, 2));
			 Объект.ПеревескаРасходСорнаяПримесь = ?(Масса = 0, 0, Окр(ЦП_СП * 100 / Масса, 2));
			 
		КонецЕсли;
		
		//заполним данные по приходу - движения
		ТабПриход_Движения = РезультатЗапроса.Скопировать(Новый Структура("Перевеска, ВидДвиженияПриход", Ложь, Истина));
		
		КоличествоДвижений = ТабПриход_Движения.Количество();
		
		Если КоличествоДвижений<>0 Тогда 
			
			 ТабПриход_Движения.Сортировать("ПериодДень");
			 Масса    = ТабПриход_Движения.Итог("КоличествоПриход");
			 ЦП_Вл    = ТабПриход_Движения.Итог("ЦПВлажностьПриход");
			 ЦП_СП    = ТабПриход_Движения.Итог("ЦПСорнаяПриход");
			 
			 Объект.ПриходНачалоПериода = ТабПриход_Движения[0].ПериодДень;
			 Объект.ПриходКонецПериода  = ТабПриход_Движения[КоличествоДвижений-1].ПериодДень;
			 Объект.ПриходКоличество    = Масса;
			 Объект.ПриходВлажность     = ?(Масса = 0, 0, Окр(ЦП_Вл * 100 / Масса, 2));
			 Объект.ПриходСорнаяПримесь = ?(Масса = 0, 0, Окр(ЦП_СП * 100 / Масса, 2));
	 
			 ЦПВлажность_ПриходВсего = ЦПВлажность_ПриходВсего + ЦП_Вл;
			 ЦПСорная_ПриходВсего    = ЦПСорная_ПриходВсего + ЦП_СП;

		КонецЕсли;
		
		//заполним данные по расходу - без отходов отходов
		ТабРасход_Движения = РезультатЗапроса.Скопировать(Новый Структура("Перевеска, ВидДвиженияРасход, СписаниеОтходов", Ложь, Истина, Ложь));
		
		КоличествоДвижений = ТабРасход_Движения.Количество();
		
		Если КоличествоДвижений<>0 Тогда 
			
			ТабРасход_Движения.Сортировать("ПериодДень");
			Масса    = ТабРасход_Движения.Итог("КоличествоРасход");
			ЦП_Вл    = ТабРасход_Движения.Итог("ЦПВлажностьРасход");
			ЦП_СП    = ТабРасход_Движения.Итог("ЦПСорнаяРасход");
			      			
			Объект.РасходНачалоПериода         = ТабРасход_Движения[0].ПериодДень;
			Объект.РасходКонецПериода          = ТабРасход_Движения[КоличествоДвижений-1].ПериодДень;
			Объект.РасходКоличество            = Масса;
			Объект.РасходВлажность             = ?(Масса = 0, 0, Окр(ЦП_Вл * 100 / Масса, 2));
			Объект.РасходСорнаяПримесь         = ?(Масса = 0, 0, Окр(ЦП_СП * 100 / Масса, 2));
     					
			
		КонецЕсли;
		
		
		Объект.ВсегоПриходКоличество       = Объект.ПеревескаПриходКоличество + Объект.ПриходКоличество;
		Объект.ВсегоПриходВлажность        = ?(Объект.ВсегоПриходКоличество = 0, 0, Окр(ЦПВлажность_ПриходВсего * 100 / Объект.ВсегоПриходКоличество, 2));
		Объект.ВсегоПриходСорнаяПримесь    = ?(Объект.ВсегоПриходКоличество = 0, 0, Окр(ЦПСорная_ПриходВсего * 100 / Объект.ВсегоПриходКоличество, 2));
		
		
		
	КонецЕсли;
	
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодработкуНаСервере()
	
	ПеречислОтход3Кат = ПредопределенноеЗначение("Перечисление.ОтходыСодержащиеЗерно.До2");
	
	Объект.Подработка.Очистить();
	Объект.Отходы.Очистить();
	
	КоличествоПобочныхПродуктов = 0;
	ЦПВлажностьПобочныхПродуктов  = 0;
	ЦПСорнаяПобочныхПродуктов     = 0;
	
	КоличествоОтходов3Кат       = 0;
	ЦПВлажностьОтходов3Кат        = 0;
	ЦПСорнаяПримесьОтходов3Кат    = 0;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(УчетСушкиОчистки.ПроцентУбыли) КАК ПроцентУбыли,
	|	МАКСИМУМ(УчетСушкиОчистки.КоличествоДоОчисткиОборот) КАК КоличествоДоОчистки,
	|	МАКСИМУМ(УчетСушкиОчистки.КоличествоПослеОчисткиОборот) КАК КоличествоПослеОчистки,
	|	МАКСИМУМ(УчетСушкиОчистки.КоличествоДоСушкиОборот) КАК КоличествоДоСушки,
	|	МАКСИМУМ(УчетСушкиОчистки.КоличествоПослеСушкиОборот) КАК КоличествоПослеСушки,
	|	МАКСИМУМ(УчетСушкиОчистки.УсушкаОборот) КАК Усушка,
	|	УчетСушкиОчистки.Регистратор КАК ДокументПодработки,
	|	Отходы.Отход,
	|	СУММА(Отходы.КоличествоРасход) КАК КоличествоОтходов,
	|	СУММА(Отходы.ЦПВлажностьРасход) КАК ЦПВлажностьОтходов,
	|	СУММА(Отходы.ЦПСорнаяРасход) КАК ЦПСорнаяОтходов,
	|	Отходы.Влажность КАК ВлажностьОтхода,
	|	Отходы.Сорная КАК СорнаяОтхода,
	|	Отходы.Отход.КлассификацияОтходовПоСодержаниюЗерна КАК СодержаниеЗерна,
	|	УчетСушкиОчистки.ДокументАнализДоСушки,
	|	УчетСушкиОчистки.ДокументАнализПослеСушки,
	|	УчетСушкиОчистки.ВидСушки,
	|	УчетСушкиОчистки.ВидОчистки
	|ИЗ
	|	РегистрНакопления.УчетСушкиОчистки.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			Номенклатура = &Номенклатура
	|				И Серия.ПериодЗаготовки = &ПериодЗаготовки) КАК УчетСушкиОчистки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетКачестваЗерна.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Авто,
	|				Номенклатура = &Номенклатура
	|					И Серия.ПериодЗаготовки = &ПериодЗаготовки) КАК УчетКачестваЗерна
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетКачестваЗерна КАК Отходы
	|			ПО УчетКачестваЗерна.Регистратор = Отходы.Регистратор
	|		ПО УчетСушкиОчистки.Регистратор = УчетКачестваЗерна.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Отходы.Отход,
	|	УчетСушкиОчистки.Регистратор,
	|	Отходы.Влажность,
	|	Отходы.Сорная,
	|	Отходы.Отход.КлассификацияОтходовПоСодержаниюЗерна,
	|	УчетСушкиОчистки.ДокументАнализДоСушки,
	|	УчетСушкиОчистки.ДокументАнализПослеСушки,
	|	УчетСушкиОчистки.ВидСушки,
	|	УчетСушкиОчистки.ВидОчистки
	|ИТОГИ
	|	МАКСИМУМ(ПроцентУбыли),
	|	МАКСИМУМ(КоличествоДоОчистки),
	|	МАКСИМУМ(КоличествоПослеОчистки),
	|	МАКСИМУМ(КоличествоДоСушки),
	|	МАКСИМУМ(КоличествоПослеСушки),
	|	МАКСИМУМ(Усушка),
	|	СУММА(КоличествоОтходов),
	|	СУММА(ЦПВлажностьОтходов),
	|	СУММА(ЦПСорнаяОтходов)
	|ПО
	|	ДокументПодработки";
	
	Запрос.УстановитьПараметр("НачалоПериода",   Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    Объект.КонецПериода);
	Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
	Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
	
	РезультатПодработки = Запрос.Выполнить();
	
	
	ВыборкаДокумент = РезультатПодработки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументПодработки");
	
	Пока ВыборкаДокумент.Следующий() Цикл 
		
		НоваяСтрокаПодработка = Объект.Подработка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПодработка, ВыборкаДокумент);
		
		
		ДетальныеЗаписи = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			 НоваяСтрокаПодработка.ДокументАнализДоСушки    = ДетальныеЗаписи.ДокументАнализДоСушки;
			 НоваяСтрокаПодработка.ДокументАнализПослеСушки = ДетальныеЗаписи.ДокументАнализПослеСушки;
			 
			Если ЗначениеЗаполнено(ДетальныеЗаписи.Отход) Тогда 
				
				НоваяСтрока = Объект.Отходы.Добавить();
				
				НоваяСтрока.ДокументПодработки = ДетальныеЗаписи.ДокументПодработки;
				НоваяСтрока.Номенклатура = ДетальныеЗаписи.Отход;
				НоваяСтрока.Количество   = ДетальныеЗаписи.КоличествоОтходов;
				НоваяСтрока.ЦПВлажность  = ДетальныеЗаписи.ЦПВлажностьОтходов;
				НоваяСтрока.ЦПСорная     = ДетальныеЗаписи.ЦПСорнаяОтходов;
				НоваяСтрока.Влажность    = ДетальныеЗаписи.ВлажностьОтхода;
				НоваяСтрока.Сорная       = ДетальныеЗаписи.СорнаяОтхода;
				
				Если ДетальныеЗаписи.СодержаниеЗерна = ПеречислОтход3Кат Тогда 
					КоличествоОтходов3Кат      = КоличествоОтходов3Кат + ДетальныеЗаписи.КоличествоОтходов;
					ЦПВлажностьОтходов3Кат     = ЦПВлажностьОтходов3Кат + ДетальныеЗаписи.ЦПВлажностьОтходов;
					ЦПСорнаяПримесьОтходов3Кат = ЦПСорнаяПримесьОтходов3Кат + ДетальныеЗаписи.ЦПСорнаяОтходов;
				Иначе 
					КоличествоПобочныхПродуктов   = КоличествоПобочныхПродуктов + ДетальныеЗаписи.КоличествоОтходов;
					ЦПВлажностьПобочныхПродуктов  = ЦПВлажностьПобочныхПродуктов + ДетальныеЗаписи.ЦПВлажностьОтходов;
					ЦПСорнаяПобочныхПродуктов     = ЦПСорнаяПобочныхПродуктов + ДетальныеЗаписи.ЦПСорнаяОтходов; 					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		
	КонецЦикла;
	
	
	Объект.РасходПобочныеПродуктыКоличество    = КоличествоПобочныхПродуктов;
	Объект.РасходПобочныеПродуктыВлажность     = ?(КоличествоПобочныхПродуктов = 0, 0, Окр(ЦПВлажностьПобочныхПродуктов*100/КоличествоПобочныхПродуктов,2));
	Объект.РасходПобочныеПродуктыСорнаяПримесь = ?(КоличествоПобочныхПродуктов = 0, 0, Окр(ЦПСорнаяПобочныхПродуктов*100/КоличествоПобочныхПродуктов,2));
	
	Объект.РасходОтходы3КатКоличество          = КоличествоОтходов3Кат;
	Объект.РасходОтходы3КатВлажность           = ?(КоличествоОтходов3Кат = 0, 0, Окр(ЦПВлажностьОтходов3Кат*100/КоличествоОтходов3Кат,2));
	Объект.РасходОтходы3КатСорнаяПримесь       = ?(КоличествоОтходов3Кат = 0, 0, Окр(ЦПСорнаяПримесьОтходов3Кат*100/КоличествоОтходов3Кат,2));

	

КонецПроцедуры 

&НаСервере
Функция ПолучитьТаблицуДляРасчетаХраненияСПартиямиТМЦ()
	
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТМЦРегламентныеОбороты.Организация,
	|	ПартииТМЦРегламентныеОбороты.МестоХранения,
	|	ПартииТМЦРегламентныеОбороты.МОЛ,
	|	ПартииТМЦРегламентныеОбороты.Номенклатура,
	|	ПартииТМЦРегламентныеОбороты.Серия,
	|	ПартииТМЦРегламентныеОбороты.ХарактеристикаНоменклатуры,
	|	ПартииТМЦРегламентныеОбороты.ВидНоменклатуры,
	|	ПартииТМЦРегламентныеОбороты.ДокументПоступления,
	|	ПартииТМЦРегламентныеОбороты.ЦенаИзготовителя,
	|	ПартииТМЦРегламентныеОбороты.КоличествоПриход,
	|	ПартииТМЦРегламентныеОбороты.КоличествоРасход
	|ПОМЕСТИТЬ ПартииТМЦ
	|ИЗ
	|	РегистрНакопления.ПартииТМЦРегламентные.Обороты(&НачалоПериода, &КонецПериода, Авто, Номенклатура = &Номенклатура) КАК ПартииТМЦРегламентныеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТМЦРегламентныеОбороты.Организация,
	|	ПартииТМЦРегламентныеОбороты.МОЛ,
	|	ПартииТМЦРегламентныеОбороты.ВидНоменклатуры,
	|	ПартииТМЦРегламентныеОбороты.ДокументПоступления,
	|	ПартииТМЦРегламентныеОбороты.ХарактеристикаНоменклатуры,
	|	ПартииТМЦРегламентныеОбороты.Серия,
	|	ПартииТМЦРегламентныеОбороты.Номенклатура,
	|	ПартииТМЦРегламентныеОбороты.МестоХранения,
	|	ПартииТМЦРегламентныеОбороты.ЦенаИзготовителя,
	|	ПартииТМЦРегламентныеОбороты.КоличествоПриход,
	|	ПартииТМЦРегламентныеОбороты.КоличествоРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваровПолученныеОбороты.Организация,
	|	ПартииТоваровПолученныеОбороты.ДоговорКонтрагента,
	|	ПартииТоваровПолученныеОбороты.СтатусПолучения,
	|	ПартииТоваровПолученныеОбороты.СчетУчета,
	|	ПартииТоваровПолученныеОбороты.Номенклатура,
	|	ПартииТоваровПолученныеОбороты.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПолученныеОбороты.Серия,
	|	ПартииТоваровПолученныеОбороты.ДокументПоступления,
	|	ПартииТоваровПолученныеОбороты.ЦенаИзготовителя,
	|	ПартииТоваровПолученныеОбороты.КоличествоОборот,
	|	ПартииТоваровПолученныеОбороты.ПериодДень,
	|	ПартииТоваровПолученныеОбороты.КоличествоПриход,
	|	ПартииТоваровПолученныеОбороты.КоличествоРасход
	|ПОМЕСТИТЬ ПартииТоваровПолученные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПолученные.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			Номенклатура = &Номенклатура
	|				И ДоговорКонтрагента.Владелец = &Контрагент) КАК ПартииТоваровПолученныеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровПолученныеОбороты.СтатусПолучения,
	|	ПартииТоваровПолученныеОбороты.Номенклатура,
	|	ПартииТоваровПолученныеОбороты.ДокументПоступления,
	|	ПартииТоваровПолученныеОбороты.ДоговорКонтрагента,
	|	ПартииТоваровПолученныеОбороты.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПолученныеОбороты.СчетУчета,
	|	ПартииТоваровПолученныеОбороты.Организация,
	|	ПартииТоваровПолученныеОбороты.Серия,
	|	ПартииТоваровПолученныеОбороты.ЦенаИзготовителя,
	|	ПартииТоваровПолученныеОбороты.КоличествоОборот,
	|	ПартииТоваровПолученныеОбороты.ПериодДень,
	|	ПартииТоваровПолученныеОбороты.КоличествоПриход,
	|	ПартииТоваровПолученныеОбороты.КоличествоРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.МестоХранения,
	|	ВложенныйЗапрос.МОЛ,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.ВидНоменклатуры,
	|	ВложенныйЗапрос.ДокументПоступления,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.ПериодДень КАК ПериодДень,
	|	ВложенныйЗапрос.Приход,
	|	ВложенныйЗапрос.Расход,
	|	ВложенныйЗапрос.ПериодДень КАК НачалоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТМЦ.Организация КАК Организация,
	|		ПартииТМЦ.МестоХранения КАК МестоХранения,
	|		ПартииТМЦ.МОЛ КАК МОЛ,
	|		ПартииТМЦ.Номенклатура КАК Номенклатура,
	|		ПартииТМЦ.Серия КАК Серия,
	|		ПартииТМЦ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииТМЦ.ВидНоменклатуры КАК ВидНоменклатуры,
	|		ПартииТМЦ.ДокументПоступления КАК ДокументПоступления,
	|		ПартииТоваровПолученные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ПартииТоваровПолученные.ПериодДень КАК ПериодДень,
	|		ВЫБОР
	|			КОГДА ПартииТМЦ.КоличествоПриход > ПартииТоваровПолученные.КоличествоПриход
	|				ТОГДА ПартииТоваровПолученные.КоличествоПриход
	|			ИНАЧЕ ПартииТМЦ.КоличествоПриход
	|		КОНЕЦ КАК Приход,
	|		ВЫБОР
	|			КОГДА ПартииТМЦ.КоличествоРасход > ПартииТоваровПолученные.КоличествоРасход
	|				ТОГДА ПартииТоваровПолученные.КоличествоРасход
	|			ИНАЧЕ ПартииТМЦ.КоличествоРасход
	|		КОНЕЦ КАК Расход
	|	ИЗ
	|		ПартииТМЦ КАК ПартииТМЦ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартииТоваровПолученные КАК ПартииТоваровПолученные
	|			ПО ПартииТМЦ.Организация = ПартииТоваровПолученные.Организация
	|				И ПартииТМЦ.Номенклатура = ПартииТоваровПолученные.Номенклатура
	|				И ПартииТМЦ.Серия = ПартииТоваровПолученные.Серия
	|				И ПартииТМЦ.ХарактеристикаНоменклатуры = ПартииТоваровПолученные.ХарактеристикаНоменклатуры
	|				И ПартииТМЦ.ДокументПоступления = ПартииТоваровПолученные.ДокументПоступления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПартииТМЦ.ХарактеристикаНоменклатуры,
	|		ПартииТМЦ.ВидНоменклатуры,
	|		ПартииТМЦ.МОЛ,
	|		ПартииТМЦ.Серия,
	|		ПартииТМЦ.Организация,
	|		ПартииТМЦ.МестоХранения,
	|		ПартииТМЦ.ДокументПоступления,
	|		ПартииТоваровПолученные.ДоговорКонтрагента,
	|		ПартииТМЦ.Номенклатура,
	|		ПартииТоваровПолученные.ПериодДень,
	|		ВЫБОР
	|			КОГДА ПартииТМЦ.КоличествоПриход > ПартииТоваровПолученные.КоличествоПриход
	|				ТОГДА ПартииТоваровПолученные.КоличествоПриход
	|			ИНАЧЕ ПартииТМЦ.КоличествоПриход
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииТМЦ.КоличествоРасход > ПартииТоваровПолученные.КоличествоРасход
	|				ТОГДА ПартииТоваровПолученные.КоличествоРасход
	|			ИНАЧЕ ПартииТМЦ.КоличествоРасход
	|		КОНЕЦ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТМЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПолученные";
	
	
	
	Запрос.УстановитьПараметр("НачалоПериода",   Объект.НачалоПериода);   
	Запрос.УстановитьПараметр("КонецПериода",    КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Контрагент",      Объект.Контрагент);
	Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
	Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДляРасчетаХранения()
	
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КачествоЗернаОбороты.Номенклатура,
	|	КачествоЗернаОбороты.КоличествоПриходПриход КАК Приход,
	|	КачествоЗернаОбороты.КоличествоРасходПриход КАК Расход,
	|	КачествоЗернаОбороты.Период КАК ПериодДень,
	|	КачествоЗернаОбороты.Период КАК НачалоПериода
	|ИЗ
	|	РегистрНакопления.УчетКачестваЗерна.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Номенклатура = &Номенклатура
	|				И ВЫБОР
	|					КОГДА &ПериодЗаготовки = ЗНАЧЕНИЕ(Справочник.ПериодыЗаготовки.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Серия.ПериодЗаготовки = &ПериодЗаготовки
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &МестоХранения = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения = &МестоХранения
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения.ПодразделениеОрганизации = &Подразделение
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Контрагент = &Контрагент
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриемнаяКвитанцияЗерновые.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВидПоступления = &ВидПоступления
	|				КОНЕЦ
	|				И Перевод = ЛОЖЬ) КАК КачествоЗернаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КачествоЗернаОбороты.Номенклатура,
	|	КачествоЗернаОбороты.КоличествоПриходПриход,
	|	КачествоЗернаОбороты.КоличествоРасходПриход,
	|	КачествоЗернаОбороты.Период,
	|	КачествоЗернаОбороты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень";
	       	       	
	Запрос.УстановитьПараметр("НачалоПериода",   Объект.НачалоПериода);   
	Запрос.УстановитьПараметр("КонецПериода",    КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
	Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
	Запрос.УстановитьПараметр("МестоХранения",   Объект.МестоХранения); 
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Контрагент",      Объект.Контрагент);
	Запрос.УстановитьПараметр("ВидПоступления",  Объект.ВидПоступления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДобавитьДополнительноеДвижениеВХранение(ТабЗнач, Инд, ДатаНачала, ДатаОкончания)
	
	
	НоваяСтрокаХранение = ТабЗнач.Вставить(Инд);
	
	НоваяСтрокаХранение.НачалоПериода  = ДатаНачала;
	НоваяСтрокаХранение.КонецПериода   = ДатаОкончания;
	
	Возврат НоваяСтрокаХранение;
	
КонецФункции

&НаСервере
Процедура РассчитатьСтрокуХранения(СтрокаХранение, Остаток, ДнейВТекМесяце, ПоследнийДеньВМесяце = Ложь)
	
	СтрокаХранение.ДнейХранения   = (СтрокаХранение.КонецПериода - СтрокаХранение.НачалоПериода)/86400 + ?(ПоследнийДеньВМесяце, 1, 0);  			
	СтрокаХранение.Остаток        = Остаток;      			
	//СтрокаХранение.КоличествоТМес = Остаток / ДнейВТекМесяце * СтрокаХранение.ДнейХранения; 
	СтрокаХранение.ОстатокДень = Остаток * СтрокаХранение.ДнейХранения; 
	
КонецПроцедуры


&НаСервере
Функция ПолучитьОстаток(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КачествоЗернаОстатки.КоличествоПриходОстаток - КачествоЗернаОстатки.КоличествоРасходОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.УчетКачестваЗерна.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Номенклатура = &Номенклатура
	|				И ВЫБОР
	|					КОГДА &ПериодЗаготовки = ЗНАЧЕНИЕ(Справочник.ПериодыЗаготовки.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Серия.ПериодЗаготовки = &ПериодЗаготовки
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &МестоХранения = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения = &МестоХранения
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ МестоХранения.ПодразделениеОрганизации = &Подразделение
	|				КОНЕЦ) КАК КачествоЗернаОстатки";
	
	Запрос.УстановитьПараметр("Период",          Новый Граница(НачалоДня(Период), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Номенклатура",    Объект.Номенклатура);
	Запрос.УстановитьПараметр("ПериодЗаготовки", Объект.ПериодЗаготовки);
	Запрос.УстановитьПараметр("МестоХранения",   Объект.МестоХранения); 
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат 0;
	Иначе
		
		Остатки = Результат.Выгрузить();
		Возврат Остатки[0].КоличествоОстаток;
		
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьЭлементов()
	
	//Элементы.ГруппаОтборы.Видимость         = ОтображатьОтборы;
	//Элементы.ГруппаРабочаяОбласть.Видимость = Не ОтображатьОтборы;
	//Элементы.ГруппаХранение.Видимость       = Не ОтображатьОтборы
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуМЦ(Индекс)
	
	//СтрокаТабличнойЧасти = Объект.Хранение[Индекс];
	
	
КонецПроцедуры

&НаКлиенте
Процедура ХранениеЦенаПриИзменении(Элемент)
	
	ПересчитатьСтрокуМЦ(Объект.Хранение.Индекс(Элементы.Хранение.ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ХранениеСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСтрокуМЦ(Объект.Хранение.Индекс(Элементы.Хранение.ТекущиеДанные));
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПоПеревеске()

	ПустаяДата = '00010101';
	
	Объект.ПеревескаПриходДата          = ПустаяДата;
	Объект.ПеревескаПриходКоличество    = 0;
	Объект.ПеревескаПриходВлажность     = 0;
	Объект.ПеревескаПриходСорнаяПримесь = 0;
	                          	
	Объект.ПеревескаРасходДата          = ПустаяДата;
	Объект.ПеревескаРасходКоличество    = 0;
	Объект.ПеревескаРасходВлажность     = 0;
	Объект.ПеревескаРасходСорнаяПримесь = 0;
	
	Объект.ПриходНачалоПериода          = ПустаяДата;
	Объект.ПриходКонецПериода           = ПустаяДата;
	Объект.ПриходКоличество             = 0;
	Объект.ПриходВлажность              = 0;
	Объект.ПриходСорнаяПримесь          = 0;

	 Объект.РасходНачалоПериода         = ПустаяДата;
	 Объект.РасходКонецПериода          = ПустаяДата;
	 Объект.РасходКоличество            = 0;
	 Объект.РасходВлажность             = 0;
	 Объект.РасходСорнаяПримесь         = 0;
	 
	 Объект.ВсегоПриходКоличество       = 0;
	 Объект.ВсегоПриходВлажность        = 0;
	 Объект.ВсегоПриходСорнаяПримесь    = 0;
	 
	 
КонецПроцедуры // ОчиститьДанныеПоПеревеске()

&НаКлиенте
Процедура РассчитатьВсегоПоРасходу()

	Объект.ВсегоРасходКоличество    = Объект.РасходКоличество + Объект.РасходПобочныеПродуктыКоличество + Объект.РасходОтходы3КатКоличество;
	Объект.ВсегоРасходВлажность     = Объект.РасходВлажность + Объект.РасходПобочныеПродуктыВлажность + Объект.РасходОтходы3КатВлажность;
	Объект.ВсегоРасходСорнаяПримесь = Объект.РасходСорнаяПримесь + Объект.РасходПобочныеПродуктыСорнаяПримесь + Объект.РасходОтходы3КатСорнаяПримесь;
	  
КонецПроцедуры // РассчитатьВсегоПоРасходу()


//// регистр УчетКачестваЗерна 
//	Движения.УчетКачестваЗерна.Очистить();
//	Движение = Движения.УчетКачестваЗерна.Добавить();
//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//	Движение.Период = Дата;
//	Движение.Организация = Организация;
//	Движение.Номенклатура = Номенклатура;
//	Движение.МестоХранения = МестоХранения;
//	Движение.ВидПоступления = ВидПоступления;
//	Движение.Контрагент = Контрагент;
//	Движение.ОткудаКуда = "Зачистка";
//	
//	Если ЗначениеЗаполнено(Контрагент) Тогда 
//		//Движение.Зачистка = ???; 
//	Иначе 
//		Движение.КоличествоПриход = Хранение.Итог("Приход");
//		Движение.КоличествоРасход = Хранение.Итог("Расход");
//	КонецЕсли;
//	
//	
//	Движения.Записать();





