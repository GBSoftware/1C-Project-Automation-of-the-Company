
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеПрочихЗатрат.Ссылка,
	|	РаспределениеПрочихЗатрат.Номер,
	|	РаспределениеПрочихЗатрат.Дата,
	|	РаспределениеПрочихЗатрат.Организация,
	|	РаспределениеПрочихЗатрат.Комментарий,
	|	РаспределениеПрочихЗатрат.Ответственный,
	|	РаспределениеПрочихЗатрат.ДатаНачалаПериода,
	|	РаспределениеПрочихЗатрат.ДатаОкончанияПериода,
	|	РаспределениеПрочихЗатрат.ПодразделениеОрганизации,
	|	РаспределениеПрочихЗатрат.СхемаРаспределения,
	|	РаспределениеПрочихЗатрат.ВидВоспроизводства,
	|	РаспределениеПрочихЗатрат.Операция,
	|	РаспределениеПрочихЗатрат.СхемаРаспределения.СпособРасчетаСуммы КАК СпособРасчетаСуммы
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат КАК РаспределениеПрочихЗатрат
	|ГДЕ
	|	РаспределениеПрочихЗатрат.Ссылка = &Ссылка";
	
	СтруктураШапкиДокумента = Запрос.Выполнить().Выбрать();
	СтруктураШапкиДокумента.Следующий();
	

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧСуммыКРаспределению.Ссылка,
	|	ТЧСуммыКРаспределению.НомерСтроки,
	|	ТЧСуммыКРаспределению.СчетЗатрат,
	|	ТЧСуммыКРаспределению.Субконто1,
	|	ТЧСуммыКРаспределению.Субконто2,
	|	ТЧСуммыКРаспределению.Субконто3,
	|	ТЧСуммыКРаспределению.Сумма,
	|	ТЧСуммыКРаспределению.СпособРаспределенияЗатратНаВыпуск,
	|	ТЧСуммыКРаспределению.НоменклатурнаяГруппа,
	|	ТЧСуммыКРаспределению.СтатьяЗатрат
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат.СуммыКРаспределению КАК ТЧСуммыКРаспределению
	|ГДЕ
	|	ТЧСуммыКРаспределению.Ссылка = &Ссылка";
	
	ТаблицаСуммыКРаспределению = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧЗатратыНаПродукцию.Ссылка,
	|	ТЧЗатратыНаПродукцию.НомерСтроки,
	|	ТЧЗатратыНаПродукцию.НоменклатурнаяГруппа,
	|	ТЧЗатратыНаПродукцию.НоменклатурнаяГруппаНЗП,
	|	ТЧЗатратыНаПродукцию.Продукция,
	|	ТЧЗатратыНаПродукцию.СерияПродукции,
	|	ТЧЗатратыНаПродукцию.Спецификация,
	|	ТЧЗатратыНаПродукцию.СтатьяЗатрат,
	|	ТЧЗатратыНаПродукцию.Сумма,
	|	ТЧЗатратыНаПродукцию.СчетЗатрат,
	|	ТЧЗатратыНаПродукцию.ХарактеристикаПродукции,
	|	ТЧЗатратыНаПродукцию.СчетУчетаВозвратныхОтходов,
	|	ТЧЗатратыНаПродукцию.МестоХраненияВозвратныхОтходов,
	|	ТЧЗатратыНаПродукцию.МестоХраненияПродукции,
	|	ТЧЗатратыНаПродукцию.Продукция.ВидНоменклатуры.СчетУчета КАК СчетУчетаПродукции
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат.ЗатратыНаПродукцию КАК ТЧЗатратыНаПродукцию
	|ГДЕ
	|	ТЧЗатратыНаПродукцию.Ссылка = &Ссылка
	|	И ТЧЗатратыНаПродукцию.Сумма <> 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.ВыполнитьПакет();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРезультатРаспределения.Ссылка,
	|	ТЧРезультатРаспределения.НомерСтроки,
	|	ТЧРезультатРаспределения.СчетДт,
	|	ТЧРезультатРаспределения.СубконтоДт1,
	|	ТЧРезультатРаспределения.СубконтоДт2,
	|	ТЧРезультатРаспределения.СубконтоДт3,
	|	ТЧРезультатРаспределения.СчетКт,
	|	ТЧРезультатРаспределения.СубконтоКт1,
	|	ТЧРезультатРаспределения.СубконтоКт2,
	|	ТЧРезультатРаспределения.СубконтоКт3,
	|	ТЧРезультатРаспределения.Содержание,
	|	ТЧРезультатРаспределения.Сумма,
	|	ТЧРезультатРаспределения.ПодразделениеОрганизации,
	|	ТЧРезультатРаспределения.НоменклатурнаяГруппа,
	|	ТЧРезультатРаспределения.СтатьяЗатрат,
	|	ТЧРезультатРаспределения.Коэффициент
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат.РезультатРаспределения КАК ТЧРезультатРаспределения
	|ГДЕ
	|	ТЧРезультатРаспределения.Ссылка = &Ссылка";
	
	ТаблицаРезультатРаспределения = Запрос.Выполнить().Выгрузить();

	
	ТаблицыДанных = Новый Структура();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	
	ТаблицыДанных.Вставить("ТаблицаСуммыКРаспределению",    ТаблицаСуммыКРаспределению);
	ТаблицыДанных.Вставить("ТаблицаРезультатРаспределения", ТаблицаРезультатРаспределения);

	Если СтруктураШапкиДокумента.Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РаспределениеПрочихЗатратПоСхеме") Тогда 
		
		Если СтруктураШапкиДокумента.СпособРасчетаСуммы = 0 Тогда 
			
			ВыполнитьПрямоеРаспределение(ТаблицыДляДвижений, ТаблицыДанных, СтруктураШапкиДокумента);
			
		ИначеЕсли СтруктураШапкиДокумента.СпособРасчетаСуммы = 1 Тогда 
			
			Если СтруктураШапкиДокумента.СхемаРаспределения.ВидБазыРаспределения = ПредопределенноеЗначение("Перечисление.ВидыБазыРаспределенияЗатрат.Произвольная") Тогда
				
				
			ИначеЕсли СтруктураШапкиДокумента.СхемаРаспределения.ВидБазыРаспределения = ПредопределенноеЗначение("Перечисление.ВидыБазыРаспределенияЗатрат.ПоОбъемуВыпуска") Тогда
				
				ТаблицыДанных.Вставить("ЗатратыНаПродукцию", Результат[0].Выгрузить());
				ТаблицыДляДвижений.Вставить("ТаблицаЗатратыНаВыпускПродукции", ПолучитьТаблицуЗатратыНаВыпускПродукции(СтруктураШапкиДокумента,ТаблицыДанных));
				ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ПолучитьТаблицуХозрасчетногоПоЗатратамНаВыпускПродукции(СтруктураШапкиДокумента,ТаблицыДанных));

			ИначеЕсли СтруктураШапкиДокумента.СхемаРаспределения.ВидБазыРаспределения = ПредопределенноеЗначение("Перечисление.ВидыБазыРаспределенияЗатрат.ПоКоэффициенту") Тогда
				
				ПолучитьРезультатРаспределения(ТаблицыДляДвижений, ТаблицыДанных, СтруктураШапкиДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли СтруктураШапкиДокумента.Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РаспределениеПрочихЗатратВозвратныеОтходы")
		Или СтруктураШапкиДокумента.Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РаспределениеПрочихЗатратГранулирование")Тогда 
		//возвратные отходы
		ТаблицыДанных.Вставить("ЗатратыНаПродукцию", Результат[0].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаЗатратыНаВыпускПродукции", ПолучитьТаблицуЗатратыНаВыпускПродукции(СтруктураШапкиДокумента,ТаблицыДанных));
		ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ПолучитьТаблицуХозрасчетногоПоЗатратамНаВыпускПродукции(СтруктураШапкиДокумента,ТаблицыДанных));

	КонецЕсли;
	

	

	
	
КонецПроцедуры

Функция ПолучитьТаблицуЗатратыНаВыпускПродукции(СтруктураШапкиДокумента,ТаблицыДанных)
	
	
	НаборЗаписей = РегистрыНакопления.ЗатратыНаВыпускПродукции.СоздатьНаборЗаписей();
	ТаблицаДвижений	= НаборЗаписей.Выгрузить();
	
	Коэффициент = 1;
	Если СтруктураШапкиДокумента.Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РаспределениеПрочихЗатратВозвратныеОтходы") Тогда
		Коэффициент = -1;	
	КонецЕсли;
	
	Для Каждого СтрокаДанные Из ТаблицыДанных.ЗатратыНаПродукцию  Цикл
		
		НовоеДвижение = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаДанные);
		
		НовоеДвижение.Сумма                      = СтрокаДанные.Сумма * Коэффициент;
		НовоеДвижение.Номенклатура               = СтрокаДанные.Продукция;
		НовоеДвижение.СерияНоменклатуры          = СтрокаДанные.СерияПродукции;
		НовоеДвижение.ХарактеристикаНоменклатуры = СтрокаДанные.ХарактеристикаПродукции;
		
	КонецЦикла;
	
	//СтатусЗатраты = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент), ПредопределенноеЗначение("Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку"), ПредопределенноеЗначение("Перечисление.СтатусыМатериальныхЗатратНаПроизводство.Собственные"));
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,							                "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,		                "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидВоспроизводства,       "ВидВоспроизводства");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,              "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.СтатусыМатериальныхЗатратНаПроизводство.Собственные"), "СтатусЗатраты");

	Возврат ТаблицаДвижений;
	
	//////////
	//
	//
	//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВариантПомола, "Спецификация");
	//
	////распределить номенклатуру на продукцию
	//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	////ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	//
	//Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент) Тогда 
	//	ТаблицаДвижений.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку"), "СтатусЗатраты");
	//	ТаблицаДвижений.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку"), "ВидВоспроизводства");
	//Иначе 		
		//ТаблицаДвижений.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.СтатусыМатериальныхЗатратНаПроизводство.Собственные"), "СтатусЗатраты");
	//	ТаблицаДвижений.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.ВидыВоспроизводстваНоменклатуры.Производство"), "ВидВоспроизводства");
	//КонецЕсли;
	
	
	//Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПолучитьТаблицуХозрасчетногоПоЗатратамНаВыпускПродукции(СтруктураШапкиДокумента,ТаблицыДанных)
	
	ТаблицаРаспределения = ТаблицыДанных.ЗатратыНаПродукцию;
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Прочитать();
	ВозврОтходы = Ложь;
	
	Если СтруктураШапкиДокумента.Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РаспределениеПрочихЗатратВозвратныеОтходы") Тогда 
		ВозврОтходы = Истина;
	КонецЕсли;

 	Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 	 
			Продолжить;	 
		КонецЕсли;
		
		Проводка = НаборЗаписейХозрасчетный.Добавить();
		Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
		Проводка.Период 		= СтруктураШапкиДокумента.Дата;
		Проводка.Активность 	= Истина;
		Проводка.Сумма		 	= СтрокаТаблицы.Сумма;
		
		Если ВозврОтходы Тогда 	
			Проводка.СчетДт 		= СтрокаТаблицы.СчетУчетаВозвратныхОтходов;
			Проводка.Содержание     = "Возвр.отходы";
		Иначе 
			Проводка.СчетДт 		= СтрокаТаблицы.СчетУчетаПродукции;
		КонецЕсли;		
	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ?(ВозврОтходы,СтрокаТаблицы.МестоХраненияВозвратныхОтходов, СтрокаТаблицы.МестоХраненияПродукции));
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
		

		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаНЗП);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.Счеткт, Проводка.СубконтоКт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		
	КонецЦикла;
	
	Возврат НаборЗаписейХозрасчетный.Выгрузить();
	
	
КонецФункции

Процедура ВыполнитьПрямоеРаспределение(ТаблицыДляДвижений, ТаблицыДанных, СтруктураШапкиДокумента)
	
	ТаблицаРаспределения = ТаблицыДанных.ТаблицаСуммыКРаспределению;
	
	СхемаРаспределения = СтруктураШапкиДокумента.СхемаРаспределения; 
	РаспределятьНаВНА = СхемаРаспределения.СчетДляРаспределения.РазделУчета = Перечисления.РазделыУчета.ВНА;
	
	Если РаспределятьНаВНА Тогда
		
		НаборЗаписейСтроительство  = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей();
		НаборЗаписейФинансирование = РегистрыНакопления.ФинансированиеКапитальныхВложений.СоздатьНаборЗаписей();
		
		ТаблицаВНА = Новый ТаблицаЗначений;
		ТаблицаВНА.Колонки.Добавить("Подрядчик");
		ТаблицаВНА.Колонки.Добавить("ОбъектСтроительства");
		ТаблицаВНА.Колонки.Добавить("СчетУчета");
		//	ТаблицаВНА.Колонки.Добавить("КоррСчет");
		ТаблицаВНА.Колонки.Добавить("Сумма");
		
	Конецесли;
	
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Прочитать();

	Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 	 
			Продолжить;	 
		КонецЕсли;
		
		Проводка = НаборЗаписейХозрасчетный.Добавить();
		
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Период = СтруктураШапкиДокумента.Дата;
		Проводка.Активность = Истина;
		
		Проводка.СчетДт = СхемаРаспределения.СчетДляРаспределения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СхемаРаспределения.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СхемаРаспределения.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СхемаРаспределения.Субконто3);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.Счеткт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если РаспределятьНаВНА Тогда 			
			
			НоваяСтВНА = ТаблицаВНА.Добавить();
			
			Если ТипЗнч(СтрокаТаблицы.Субконто1)=Тип("СправочникСсылка.ПодразделенияОрганизаций")
				ИЛИ ТипЗнч(СтрокаТаблицы.Субконто1)=Тип("СправочникСсылка.Контрагенты") Тогда
				НоваяСтВНА.Подрядчик=СтрокаТаблицы.Субконто1 ;
			КонецЕсли;
			
			НоваяСтВНА.ОбъектСтроительства=СхемаРаспределения.Субконто1;
			НоваяСтВНА.СчетУчета=СхемаРаспределения.СчетДляРаспределения;
			НоваяСтВНА.Сумма=СтрокаТаблицы.Сумма;
			
		КонецЕсли; 			
		
	КонецЦикла;
		
	//	Если СхемаРаспределения.ЗаписатьПроводкиПослеРаспределения Тогда
	//		
	//		Движения.Хозрасчетный.Записать(Ложь);
	//		
	//	КонецЕсли;
		
	Если РаспределятьНаВНА Тогда
		
		ТабСтроительствоОбъектовОС = ТаблицаВНА.Скопировать();
		ТабСтроительствоОбъектовОС.Свернуть("ОбъектСтроительства,Подрядчик,СчетУчета","Сумма");
		
		Для Каждого СтрокаРаспределения Из  ТабСтроительствоОбъектовОС Цикл
			
			ДвижениеВНА = НаборЗаписейСтроительство.Добавить();
			
			ДвижениеВНА.Период              = СтруктураШапкиДокумента.Дата;
			ДвижениеВНА.Регистратор         = СтруктураШапкиДокумента.Ссылка;
			ДвижениеВНА.ВидДвижения         = ВидДвиженияНакопления.Приход;
			ДвижениеВНА.Организация         = СтруктураШапкиДокумента.Организация;
			ДвижениеВНА.ОбъектСтроительства = СтрокаРаспределения.ОбъектСтроительства;
			ДвижениеВНА.Сумма               = СтрокаРаспределения.Сумма;
			ДвижениеВНА.СчетУчета           = СтрокаРаспределения.СчетУчета;
			ДвижениеВНА.Подрядчик           = СтрокаРаспределения.Подрядчик;
			
		КонецЦикла;
		
		//Движения.СтроительствоОбъектовОсновныхСредств.Записывать=Истина;
		
		ТабФинансирование = ТаблицаВНА.Скопировать();
		ТабФинансирование.Свернуть("ОбъектСтроительства,Подрядчик,СчетУчета","Сумма");
		
		Для Каждого СтрокаРаспределения Из  ТабФинансирование цикл
			
			ДвижениеВНА             = НаборЗаписейФинансирование.Добавить();
			ДвижениеВНА.Период      = СтруктураШапкиДокумента.Дата;
			ДвижениеВНА.Регистратор = СтруктураШапкиДокумента.Ссылка;
			
			ДвижениеВНА.Организация         = СтруктураШапкиДокумента.Организация;
			ДвижениеВНА.ОбъектСтроительства = СтрокаРаспределения.ОбъектСтроительства;
			ДвижениеВНА.Сумма               = СтрокаРаспределения.Сумма;
			//ДвижениеВНА.СчетУчета=СтрокаРаспределения.СчетУчета;
			ДвижениеВНА.КорСчет             = СтрокаРаспределения.СчетУчета;
			ДвижениеВНА.Подрядчик           = СтрокаРаспределения.Подрядчик;
			//ДвижениеВНА.Ответственный       = Ответственный;
			
		КонецЦикла;
		
		//Движения.ФинансированиеКапитальныхВложений.Записывать=Истина;
		
	КонецЕсли;
	
	
	ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", НаборЗаписейХозрасчетный.Выгрузить());
	
	Если РаспределятьНаВНА Тогда 
		
		ТаблицыДляДвижений.Вставить("ТаблицаСтроительство",  НаборЗаписейСтроительство.Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаФинансирование", НаборЗаписейФинансирование.Выгрузить());
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ПолучитьРезультатРаспределения(ТаблицыДляДвижений, ТаблицыДанных, СтруктураШапкиДокумента)
	
	
    ТаблицаРаспределения = ТаблицыДанных.ТаблицаРезультатРаспределения;
	
	//СхемаРаспределения = СтруктураШапкиДокумента.СхемаРаспределения; 
	//РаспределятьНаВНА = СхемаРаспределения.СчетДляРаспределения.РазделУчета = Перечисления.РазделыУчета.ВНА;
	//
	//Если РаспределятьНаВНА Тогда
	//	
	//	НаборЗаписейСтроительство  = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей();
	//	НаборЗаписейФинансирование = РегистрыНакопления.ФинансированиеКапитальныхВложений.СоздатьНаборЗаписей();
	//	
	//	ТаблицаВНА = Новый ТаблицаЗначений;
	//	ТаблицаВНА.Колонки.Добавить("Подрядчик");
	//	ТаблицаВНА.Колонки.Добавить("ОбъектСтроительства");
	//	ТаблицаВНА.Колонки.Добавить("СчетУчета");
	//	//	ТаблицаВНА.Колонки.Добавить("КоррСчет");
	//	ТаблицаВНА.Колонки.Добавить("Сумма");
	//	
	//Конецесли;
	//
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Прочитать();

	Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 	 
			Продолжить;	 
		КонецЕсли;
		
		Проводка = НаборЗаписейХозрасчетный.Добавить();
		
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Период = СтруктураШапкиДокумента.Дата;
		Проводка.Активность = Истина;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.Счеткт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		//Если РаспределятьНаВНА Тогда 			
		//	
		//	НоваяСтВНА = ТаблицаВНА.Добавить();
		//	ТипЗначенияСубконтоДт1 = ТипЗнч(СтрокаТаблицы.СубконтоДт1);
		//	
		//	Если ТипЗначенияСубконтоДт1 = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЗначенияСубконтоДт1 = Тип("СправочникСсылка.Контрагенты") Тогда
		//		НоваяСтВНА.Подрядчик = СтрокаТаблицы.СубконтоДт1 ;
		//	КонецЕсли;
		//	
		//	НоваяСтВНА.ОбъектСтроительства = СтрокаТаблицы.СубконтоДт1;
		//	НоваяСтВНА.СчетУчета           = СтрокаТаблицы.СчетДт;
		//	НоваяСтВНА.Сумма               = СтрокаТаблицы.Сумма;
		//	
		//КонецЕсли; 			
		
	КонецЦикла;
		
	//	Если СхемаРаспределения.ЗаписатьПроводкиПослеРаспределения Тогда
	//		
	//		Движения.Хозрасчетный.Записать(Ложь);
	//		
	//	КонецЕсли;
		
	//Если РаспределятьНаВНА Тогда
	//	
	//	ТабСтроительствоОбъектовОС = ТаблицаВНА.Скопировать();
	//	ТабСтроительствоОбъектовОС.Свернуть("ОбъектСтроительства,Подрядчик,СчетУчета","Сумма");
	//	
	//	Для Каждого СтрокаРаспределения Из  ТабСтроительствоОбъектовОС Цикл
	//		
	//		ДвижениеВНА = НаборЗаписейСтроительство.Добавить();
	//		
	//		ДвижениеВНА.Период              = СтруктураШапкиДокумента.Дата;
	//		ДвижениеВНА.Регистратор         = СтруктураШапкиДокумента.Ссылка;
	//		ДвижениеВНА.ВидДвижения         = ВидДвиженияНакопления.Приход;
	//		ДвижениеВНА.Организация         = СтруктураШапкиДокумента.Организация;
	//		ДвижениеВНА.ОбъектСтроительства = СтрокаРаспределения.ОбъектСтроительства;
	//		ДвижениеВНА.Сумма               = СтрокаРаспределения.Сумма;
	//		ДвижениеВНА.СчетУчета           = СтрокаРаспределения.СчетУчета;
	//		ДвижениеВНА.Подрядчик           = СтрокаРаспределения.Подрядчик;
	//		
	//	КонецЦикла;
	//	
	//	//Движения.СтроительствоОбъектовОсновныхСредств.Записывать=Истина;
	//	
	//	ТабФинансирование = ТаблицаВНА.Скопировать();
	//	ТабФинансирование.Свернуть("ОбъектСтроительства,Подрядчик,СчетУчета","Сумма");
	//	
	//	Для Каждого СтрокаРаспределения Из  ТабФинансирование цикл
	//		
	//		ДвижениеВНА             = НаборЗаписейФинансирование.Добавить();
	//		ДвижениеВНА.Период      = СтруктураШапкиДокумента.Дата;
	//		ДвижениеВНА.Регистратор = СтруктураШапкиДокумента.Ссылка;
	//		
	//		ДвижениеВНА.Организация         = СтруктураШапкиДокумента.Организация;
	//		ДвижениеВНА.ОбъектСтроительства = СтрокаРаспределения.ОбъектСтроительства;
	//		ДвижениеВНА.Сумма               = СтрокаРаспределения.Сумма;
	//		//ДвижениеВНА.СчетУчета=СтрокаРаспределения.СчетУчета;
	//		ДвижениеВНА.КорСчет             = СтрокаРаспределения.СчетУчета;
	//		ДвижениеВНА.Подрядчик           = СтрокаРаспределения.Подрядчик;
	//		//ДвижениеВНА.Ответственный       = Ответственный;
	//		
	//	КонецЦикла;
	//	
	//	//Движения.ФинансированиеКапитальныхВложений.Записывать=Истина;
	//	
	//КонецЕсли;
	
	
	ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", НаборЗаписейХозрасчетный.Выгрузить());
	
	//Если РаспределятьНаВНА Тогда 
	//	
	//	ТаблицыДляДвижений.Вставить("ТаблицаСтроительство",  НаборЗаписейСтроительство.Выгрузить());
	//	ТаблицыДляДвижений.Вставить("ТаблицаФинансирование", НаборЗаписейФинансирование.Выгрузить());
	//	
	//КонецЕсли;

	
КонецПроцедуры

Функция ПечатьРаспределниеНаПродукцию(МассивОбъектов, ОбъектыПечати) Экспорт
    
    ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПечатьЗатрат";
    ТабДок.АвтоМасштаб = Истина;
    
    // получим макет и области
    Макет = Документы.РаспределениеПрочихЗатрат.ПолучитьМакет("ПечатьРаспределниеНаПродукцию");
    ОбластьЗаголовок                = Макет.ПолучитьОбласть("Заголовок");
    Шапка                           = Макет.ПолучитьОбласть("Шапка");
    Область                         = Макет.ПолучитьОбласть("СуммыКРаспределениюШапка");
    ОбластьСуммыКРаспределению      = Макет.ПолучитьОбласть("СуммыКРаспределению");
    ОбластьИтогиСуммыКРаспределению = Макет.ПолучитьОбласть("СуммыКРаспределениюИтоги");
    ОбластьЗатратыНаПродукциюШапка  = Макет.ПолучитьОбласть("ЗатратыНаПродукциюШапка");
    ОбластьЗатратыНаПродукцию       = Макет.ПолучитьОбласть("ЗатратыНаПродукцию");
    ОбластьИтогиСуммыЗатраты        = Макет.ПолучитьОбласть("ЗатратыКРаспределениюИтоги");
    
    // получим выборку
    Выборка = ПолучитьВыборку(МассивОбъектов);
    
    // выведем выборку в табличный документ
    ТабДок.Очистить();
    ВставлятьРазделительСтраниц = Ложь;
    Пока Выборка.Следующий() Цикл
        
        Если ВставлятьРазделительСтраниц Тогда
            ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        
        ТабДок.Вывести(ОбластьЗаголовок);
        
        Шапка.Параметры.Заполнить(Выборка);
        ТабДок.Вывести(Шапка, Выборка.Уровень());
        
        // ПЕРВАЯ ТЧ ///////////////////////
        ВыборкаСуммыКРаспределению = Выборка.СуммыКРаспределению.Выбрать();
        Если ВыборкаСуммыКРаспределению.Количество() > 0 Тогда
        ТабДок.Вывести(Область);
        КонецЕсли;
        Пока ВыборкаСуммыКРаспределению.Следующий() Цикл
            ОбластьСуммыКРаспределению.Параметры.Заполнить(ВыборкаСуммыКРаспределению);
            ТабДок.Вывести(ОбластьСуммыКРаспределению);
        КонецЦикла;
        // итоги первой тч
        ОбластьИтогиСуммыКРаспределению.Параметры.СуммаИтогоСуммы = Выборка.ИтогоСуммаКРаспределению;
        ТабДок.Вывести(ОбластьИтогиСуммыКРаспределению);
               
        // ВТОРАЯ ТЧ ///////////////////////
        ВыборкаЗатратыНаПродукцию = Выборка.ЗатратыНаПродукцию.Выбрать();
        Если ВыборкаЗатратыНаПродукцию.Количество() > 0 Тогда
        ТабДок.Вывести(ОбластьЗатратыНаПродукциюШапка);
        КонецЕсли;
        Пока ВыборкаЗатратыНаПродукцию.Следующий() Цикл
            ОбластьЗатратыНаПродукцию.Параметры.Заполнить(ВыборкаЗатратыНаПродукцию);
            ТабДок.Вывести(ОбластьЗатратыНаПродукцию, ВыборкаЗатратыНаПродукцию.Уровень());
        КонецЦикла;
        // итоги второй тч
        ОбластьИтогиСуммыЗатраты.Параметры.СуммаИтогоЗатраты = Выборка.ИтогоСуммаЗатратНаПродукцию;;
        ТабДок.Вывести(ОбластьИтогиСуммыЗатраты);
        
        ВставлятьРазделительСтраниц = Истина;		
    КонецЦикла;

	Возврат ТабДок;
	
КонецФункции

Процедура ПечатьРаспределниеПоГранулированию(ТабДок, Ссылка) Экспорт

	Макет = Документы.РаспределениеПрочихЗатрат.ПолучитьМакет("ПФ_MXL_РаспределниеПоГранулированию");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеПрочихЗатрат.Дата,
	|	РаспределениеПрочихЗатрат.Номер,
	|	РаспределениеПрочихЗатрат.Организация,
	|	РаспределениеПрочихЗатрат.ПрочиеЗатраты.(
	|		Ссылка,
	|		НомерСтроки,
	|		НоменклатурнаяГруппа,
	|		СтатьяЗатрат,
	|		Сумма,
	|		СчетЗатрат,
	|		ПодразделениеОрганизацииНЗП,
	|		КоличествоГранулы,
	|		КоличествоНаГранулы,
	|		Количество,
	|		Цена
	|	)
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат КАК РаспределениеПрочихЗатрат
	|ГДЕ
	|	РаспределениеПрочихЗатрат.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		
		//ТабДок.Вывести(ОбластьЗатратыНаПродукциюШапка);
		ВыборкаПрочиеЗатраты = Выборка.ПрочиеЗатраты.Выбрать();
		
		Пока ВыборкаПрочиеЗатраты.Следующий() Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка"); 
			ОбластьСтрока.Параметры.Заполнить(ВыборкаПрочиеЗатраты);
			ТабДок.Вывести(ОбластьСтрока, ВыборкаПрочиеЗатраты.Уровень());
		КонецЦикла;
		
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПечатьРаспределениеПоКоэффициенту(ТабДок, Ссылка) Экспорт

	Макет  = Документы.РаспределениеПрочихЗатрат.ПолучитьМакет("ПФ_MXL_РаспределниеПоКоэффициенту");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеПрочихЗатрат.Дата,
	|	РаспределениеПрочихЗатрат.Номер,
	|	РаспределениеПрочихЗатрат.Организация,
	|	РаспределениеПрочихЗатрат.СхемаРаспределения,
	|	РаспределениеПрочихЗатрат.СуммыКРаспределению.(
	|		Ссылка,
	|		НомерСтроки,
	|		СчетЗатрат,
	|		Субконто1,
	|		Субконто2,
	|		Субконто3,
	|		Сумма,
	|		СпособРаспределенияЗатратНаВыпуск,
	|		НоменклатурнаяГруппа,
	|		СтатьяЗатрат
	|	),
	|	РаспределениеПрочихЗатрат.БазаДляРаспределения.(
	|		Ссылка,
	|		НомерСтроки,
	|		Сумма,
	|		СчетДляРаспределения,
	|		Субконто1,
	|		Субконто2,
	|		Субконто3,
	|		Коэффициент,
	|		ИспользованиеСубконто1,
	|		ИспользованиеСубконто2,
	|		ИспользованиеСубконто3
	|	),
	|	РаспределениеПрочихЗатрат.РезультатРаспределения.(
	|		СчетДт,
	|		СубконтоДт1,
	|		СубконтоДт2,
	|		СубконтоДт3,
	|		СчетКт,
	|		СубконтоКт1,
	|		СубконтоКт2,
	|		СубконтоКт3,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат КАК РаспределениеПрочихЗатрат
	|ГДЕ
	|	РаспределениеПрочихЗатрат.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		     		
		
		// Шапка
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка);
		
		
		
		//// ЗатратыНаПродукцию
		//Область = Макет.ПолучитьОбласть("ЗатратыНаПродукциюШапка");
		//ТабДок.Вывести(Область);
		//ОбластьЗатратыНаПродукцию = Макет.ПолучитьОбласть("ЗатратыНаПродукцию");
		//
		//ВыборкаЗатратыНаПродукцию = Выборка.ЗатратыНаПродукцию.Выбрать();
		//Пока ВыборкаЗатратыНаПродукцию.Следующий() Цикл 
		//	ОбластьЗатратыНаПродукцию.Параметры.Заполнить(ВыборкаЗатратыНаПродукцию);
		//	ТабДок.Вывести(ОбластьЗатратыНаПродукцию);
		//КонецЦикла;
		
		
		// СуммыКРаспределению
		Область = Макет.ПолучитьОбласть("СуммыКРаспределениюШапка");
		ТабДок.Вывести(Область);
		ОбластьСуммыКРаспределению = Макет.ПолучитьОбласть("СуммыКРаспределению");
		
		ВыборкаСуммыКРаспределению = Выборка.СуммыКРаспределению.Выбрать();
		
		СуммаИтогоСуммы = 0;
		Пока ВыборкаСуммыКРаспределению.Следующий() Цикл
			ОбластьСуммыКРаспределению.Параметры.Заполнить(ВыборкаСуммыКРаспределению);
			СуммаИтогоСуммы = СуммаИтогоСуммы + ВыборкаСуммыКРаспределению.Сумма;
			ТабДок.Вывести(ОбластьСуммыКРаспределению);
		КонецЦикла;
		
		ОбластьИтогиСуммы = Макет.ПолучитьОбласть("СуммыКРаспределениюИтоги");
			СтруктураИтогиСуммы = Новый Структура("СуммаИтогоСуммы", СуммаИтогоСуммы);
			ОбластьИтогиСуммы.Параметры.Заполнить(СтруктураИтогиСуммы);
		ТабДок.Вывести(ОбластьИтогиСуммы);
		
		
		// БазаДляРаспределения
		Область = Макет.ПолучитьОбласть("БазаДляРаспределенияШапка");
		ТабДок.Вывести(Область);
		ОбластьБазаДляРаспределения = Макет.ПолучитьОбласть("БазаДляРаспределения");
		ВыборкаБазаДляРаспределения = Выборка.БазаДляРаспределения.Выбрать();
		СуммаИтогоБаза = 0;
		Пока ВыборкаБазаДляРаспределения.Следующий() Цикл
			ОбластьБазаДляРаспределения.Параметры.Заполнить(ВыборкаБазаДляРаспределения);
			СуммаИтогоБаза = СуммаИтогоБаза + ВыборкаБазаДляРаспределения.Коэффициент;
			ТабДок.Вывести(ОбластьБазаДляРаспределения);
		КонецЦикла;
		
		ОбластьИтогиБаза = Макет.ПолучитьОбласть("БазаДляРаспределенияИтоги");
			СтруктураИтогиБаза = Новый Структура("СуммаИтогоБаза", СуммаИтогоБаза);
			ОбластьИтогиБаза.Параметры.Заполнить(СтруктураИтогиБаза);
		ТабДок.Вывести(ОбластьИтогиБаза);

		
		
		////ТабДок.Вывести(ОбластьЗатратыНаПродукциюШапка);
		//ВыборкаПрочиеЗатраты = Выборка.ПрочиеЗатраты.Выбрать();
		//
		//Пока ВыборкаПрочиеЗатраты.Следующий() Цикл
		//	ОбластьСтрока = Макет.ПолучитьОбласть("Строка"); 
		//	ОбластьСтрока.Параметры.Заполнить(ВыборкаПрочиеЗатраты);
		//	ТабДок.Вывести(ОбластьСтрока, ВыборкаПрочиеЗатраты.Уровень());
		//КонецЦикла;
		
		// РезультатРаспределения
		Область = Макет.ПолучитьОбласть("РезультатРаспределенияШапка");
		ТабДок.Вывести(Область);
		ОбластьРезультатРаспределения = Макет.ПолучитьОбласть("РезультатРаспределения");
		ВыборкаРезультатРаспределения = Выборка.РезультатРаспределения.Выбрать();
		
		СуммаИтогоРезультат = 0;
		Пока ВыборкаРезультатРаспределения.Следующий() Цикл
			ОбластьРезультатРаспределения.Параметры.Заполнить(ВыборкаРезультатРаспределения);
			СуммаИтогоРезультат = СуммаИтогоРезультат + ВыборкаРезультатРаспределения.Сумма;
			ТабДок.Вывести(ОбластьРезультатРаспределения);
		КонецЦикла;
		
		ОбластьИтогоРезультат = Макет.ПолучитьОбласть("РезультатРаспределенияИтоги");
			СтруктураИтогиРезультат = Новый Структура("СуммаИтогоРезультат", СуммаИтогоРезультат);
			ОбластьИтогоРезультат.Параметры.Заполнить(СтруктураИтогиРезультат);
		ТабДок.Вывести(ОбластьИтогоРезультат);
		
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьВыборку(МассивСсылок)

    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   РаспределениеПрочихЗатрат.Дата,
    |   РаспределениеПрочихЗатрат.Номер,
    |   РаспределениеПрочихЗатрат.Организация,
    |   РаспределениеПрочихЗатрат.Ссылка КАК Ссылка,
    |   РаспределениеПрочихЗатрат.СхемаРаспределения,
    |   РаспределениеПрочихЗатрат.СхемаРаспределения.СчетЗатрат,
    |   РаспределениеПрочихЗатрат.СуммыКРаспределению.(
    |       Субконто1,
    |       Субконто2,
    |       Субконто3,
    |       СУММА(Сумма),
    |       СчетЗатрат
    |   ),
    |   РаспределениеПрочихЗатрат.ЗатратыНаПродукцию.(
    |       Спецификация,
    |       СтатьяЗатрат,
    |       СУММА(Сумма),
    |       СчетЗатрат
    |   ),
    |   ВложенныйЗапрос.ИтогоСуммаЗатратНаПродукцию,
    |   ВложенныйЗапрос1.ИтогоСуммаКРаспределению
    |ИЗ
    |   Документ.РаспределениеПрочихЗатрат КАК РаспределениеПрочихЗатрат
    |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |           РаспределениеПрочихЗатратЗатратыНаПродукцию.Ссылка КАК Ссылка,
    |           СУММА(РаспределениеПрочихЗатратЗатратыНаПродукцию.Сумма) КАК ИтогоСуммаЗатратНаПродукцию
    |       ИЗ
    |           Документ.РаспределениеПрочихЗатрат.ЗатратыНаПродукцию КАК РаспределениеПрочихЗатратЗатратыНаПродукцию
    |       ГДЕ
    |           РаспределениеПрочихЗатратЗатратыНаПродукцию.Ссылка В(&МассивСсылок)
    |       
    |       СГРУППИРОВАТЬ ПО
    |           РаспределениеПрочихЗатратЗатратыНаПродукцию.Ссылка) КАК ВложенныйЗапрос
    |       ПО РаспределениеПрочихЗатрат.Ссылка = ВложенныйЗапрос.Ссылка
    |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |           РаспределениеПрочихЗатратСуммыКРаспределению.Ссылка КАК Ссылка,
    |           СУММА(РаспределениеПрочихЗатратСуммыКРаспределению.Сумма) КАК ИтогоСуммаКРаспределению
    |       ИЗ
    |           Документ.РаспределениеПрочихЗатрат.СуммыКРаспределению КАК РаспределениеПрочихЗатратСуммыКРаспределению
    |       ГДЕ
    |           РаспределениеПрочихЗатратСуммыКРаспределению.Ссылка В(&МассивСсылок)
    |       
    |       СГРУППИРОВАТЬ ПО
    |           РаспределениеПрочихЗатратСуммыКРаспределению.Ссылка) КАК ВложенныйЗапрос1
    |       ПО РаспределениеПрочихЗатрат.Ссылка = ВложенныйЗапрос1.Ссылка
    |ГДЕ
    |   РаспределениеПрочихЗатрат.Ссылка В(&Массивссылок)
    |
    |СГРУППИРОВАТЬ ПО
    |   РаспределениеПрочихЗатрат.СуммыКРаспределению.(СчетЗатрат,
    |   Субконто1,
    |   Субконто2,
    |   Субконто3),
    |   РаспределениеПрочихЗатрат.ЗатратыНаПродукцию.(Спецификация,
    |   СтатьяЗатрат,
    |   СчетЗатрат)";
    Запрос.УстановитьПараметр("Массивссылок", Массивссылок);
    Выборка = Запрос.Выполнить().Выбрать();
    
    Возврат Выборка;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЗатрат") Тогда
		                                                                         
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
                                                            "ПечатьЗатрат", 
                                                            "Распределение прочих затрат", 
                                                            ПечатьРаспределниеНаПродукцию(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

